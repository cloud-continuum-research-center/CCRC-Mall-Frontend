{"ast":null,"code":"import { onMounted } from \"vue\";\nimport * as SPLAT from \"gsplat\";\nexport default {\n  name: \"CanvasRenderer\",\n  props: {\n    url: String\n  },\n  setup(props) {\n    const scene = new SPLAT.Scene();\n    const camera = new SPLAT.Camera();\n    const renderer = new SPLAT.WebGLRenderer();\n    const controls = new SPLAT.OrbitControls(camera, renderer.canvas);\n    const loadModel = async () => {\n      //            await SPLAT.Loader.LoadAsync(props.url, scene, () => { });\n      await SPLAT.PLYLoader.LoadAsync(props.url, scene, () => {});\n    };\n    const render = () => {\n      const frame = () => {\n        controls.update();\n        renderer.render(scene, camera);\n        requestAnimationFrame(frame);\n      };\n      requestAnimationFrame(frame);\n    };\n    onMounted(async () => {\n      await loadModel();\n      render();\n    });\n    return {\n      scene,\n      camera,\n      renderer,\n      controls\n    };\n  }\n};","map":{"version":3,"names":["onMounted","SPLAT","name","props","url","String","setup","scene","Scene","camera","Camera","renderer","WebGLRenderer","controls","OrbitControls","canvas","loadModel","PLYLoader","LoadAsync","render","frame","update","requestAnimationFrame"],"sources":["C:\\Users\\boo\\icns\\shop\\front-end\\src\\components\\CanvasRenderer.vue"],"sourcesContent":["<template>\r\n    <div class=\"canvas-container\">\r\n        <canvas ref=\"canvas\" width=\"800\" height=\"400\"></canvas>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { onMounted } from \"vue\";\r\nimport * as SPLAT from \"gsplat\";\r\n\r\nexport default {\r\n    name: \"CanvasRenderer\",\r\n    props: {\r\n        url: String\r\n    },\r\n    setup(props) {\r\n        const scene = new SPLAT.Scene();\r\n        const camera = new SPLAT.Camera();\r\n        const renderer = new SPLAT.WebGLRenderer();\r\n        const controls = new SPLAT.OrbitControls(camera, renderer.canvas);\r\n\r\n        const loadModel = async () => {\r\n//            await SPLAT.Loader.LoadAsync(props.url, scene, () => { });\r\n            await SPLAT.PLYLoader.LoadAsync(props.url, scene, () => { });\r\n        };\r\n\r\n        const render = () => {\r\n            const frame = () => {   \r\n                controls.update();\r\n                renderer.render(scene, camera);\r\n                requestAnimationFrame(frame);\r\n            };\r\n            requestAnimationFrame(frame);\r\n        };\r\n\r\n        onMounted(async () => {\r\n            await loadModel();\r\n            render();\r\n        });\r\n\r\n        return { scene, camera, renderer, controls };\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.canvas-container {\r\n    display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 400px;\r\n  margin-top: 20px; /* 또는 다른 여백 설정 */\r\n}\r\ncanvas {\r\n    position: relative; /* 상대적으로 배치 */\r\n    width: 100%; /* 부모 요소에 꽉 차도록 설정 */\r\n    height: 100%; /* 부모 요소에 꽉 차도록 설정 */\r\n}\r\n</style>\r\n"],"mappings":"AAOA,SAASA,SAAQ,QAAS,KAAK;AAC/B,OAAO,KAAKC,KAAI,MAAO,QAAQ;AAE/B,eAAe;EACXC,IAAI,EAAE,gBAAgB;EACtBC,KAAK,EAAE;IACHC,GAAG,EAAEC;EACT,CAAC;EACDC,KAAKA,CAACH,KAAK,EAAE;IACT,MAAMI,KAAI,GAAI,IAAIN,KAAK,CAACO,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAK,GAAI,IAAIR,KAAK,CAACS,MAAM,CAAC,CAAC;IACjC,MAAMC,QAAO,GAAI,IAAIV,KAAK,CAACW,aAAa,CAAC,CAAC;IAC1C,MAAMC,QAAO,GAAI,IAAIZ,KAAK,CAACa,aAAa,CAACL,MAAM,EAAEE,QAAQ,CAACI,MAAM,CAAC;IAEjE,MAAMC,SAAQ,GAAI,MAAAA,CAAA,KAAY;MACtC;MACY,MAAMf,KAAK,CAACgB,SAAS,CAACC,SAAS,CAACf,KAAK,CAACC,GAAG,EAAEG,KAAK,EAAE,MAAM,CAAE,CAAC,CAAC;IAChE,CAAC;IAED,MAAMY,MAAK,GAAIA,CAAA,KAAM;MACjB,MAAMC,KAAI,GAAIA,CAAA,KAAM;QAChBP,QAAQ,CAACQ,MAAM,CAAC,CAAC;QACjBV,QAAQ,CAACQ,MAAM,CAACZ,KAAK,EAAEE,MAAM,CAAC;QAC9Ba,qBAAqB,CAACF,KAAK,CAAC;MAChC,CAAC;MACDE,qBAAqB,CAACF,KAAK,CAAC;IAChC,CAAC;IAEDpB,SAAS,CAAC,YAAY;MAClB,MAAMgB,SAAS,CAAC,CAAC;MACjBG,MAAM,CAAC,CAAC;IACZ,CAAC,CAAC;IAEF,OAAO;MAAEZ,KAAK;MAAEE,MAAM;MAAEE,QAAQ;MAAEE;IAAS,CAAC;EAChD;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}